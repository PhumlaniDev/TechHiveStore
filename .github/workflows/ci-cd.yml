name: Build-Test-Analyze Code

on:
  pull_request:
    branches: [ develop, main ]
  push:
    branches: [ develop, main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-dependencies.outputs.cache-key }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Java
        id: setup-java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'

      - name: Cache Maven dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Output Cache Key (Debugging)
        run: |
          echo "Cache Key: $CACHE_KEY"
        env:
          CACHE_KEY: ${{ steps.cache-dependencies.outputs.cache-key }}


  checkstyle:
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Java and Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'

      - name: Run Checkstyle
        run: mvn checkstyle:check

  build:
    runs-on: ubuntu-latest
    needs: [ checkstyle ]
    services:
      postgres:
        image: postgres:16.0
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: tech_hive_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Output Cache Key (Debugging)
        run: |
          echo "Cache Key: $CACHE_KEY"
        env:
          CACHE_KEY: ${{ steps.cache-dependencies.outputs.cache-key }}

      - name: Restore Maven cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Copy Maven settings
        run: |
          mkdir -p ~/.m2
          cp .github/settings.xml ~/.m2/settings.xml

      - name: Build with Maven
        run: mvn clean install -Dspring.profiles.active=local --settings .github/settings.xml
        env:
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/tech_hive_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          GH_PAT: ${{ secrets.GH_PAT }}
          GH_USERNAME: ${{ secrets.GH_USERNAME }}

  unit_tests:
    runs-on: ubuntu-latest
    needs: [ build ]
    services:
      postgres:
        image: postgres:16.0
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Unit Tests
        run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test_db
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

  vulnerability_scan:
    runs-on: ubuntu-latest
    needs: [ unit_tests ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: ${{ runner.os }}-trivy-db

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
