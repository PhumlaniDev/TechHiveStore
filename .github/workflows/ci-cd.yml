name: build

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-dependencies.outputs.cache-hit }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Java
        id: setup-java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache Maven dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-



  #  lint:
  #    runs-on: ubuntu-latest
  #    needs: [ setup ]
  #    steps:
  #      - name: Check out code
  #        uses: actions/checkout@v3
  #
  #      - name: Set up Java
  #        uses: actions/setup-java@v3
  #        with:
  #          distribution: 'zulu'
  #          java-version: '17'
  #
  #      - name: Install Maven
  #        uses: actions/setup-java@v3
  #        with:
  #          distribution: 'zulu'
  #          java-version: '17'
  #          cache: 'maven'
  #
  #      - name: Run Lint
  #        run: mvn checkstyle:check

  build:
    runs-on: ubuntu-latest
    needs: [ setup ]

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: tech_hive_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Set Jasypt Encryptor Password
        run: echo "JASYPT_ENCRYPTOR_PASSWORD=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}" >> $GITHUB_ENV

      - name: Copy Maven settings
        run: |
          mkdir -p ~/.m2
          cp .github/settings.xml ~/.m2/settings.xml

      - name: Build with Maven
        run: mvn clean install -Dspring.profiles.active=local --settings ~/.m2/settings.xml
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/tech_hive_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }} ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:latest

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:latest

  unit_tests:
    runs-on: ubuntu-latest
    needs: [ build ]

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: tech_hive_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run Unit Tests
        run: mvn test -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

  code_analysis:
    runs-on: ubuntu-latest
    needs: [ unit_tests ]

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: tech_hive_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Code Analysis with SonarQube
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage, test -Dsonar.projectKey=PhumlaniDev_TechHiveStore -Dsonar.host.url=https://sonarcloud.io

  #  integration_test:
  #    runs-on: ubuntu-latest
  #    needs: [ code_analysis ]
  #    services:
  #      postgres:
  #        image: postgres:latest
  #        ports:
  #          - 5432:5432
  #        env:
  #          POSTGRES_DB: techhive
  #          POSTGRES_USER: phumlanidev
  #          POSTGRES_PASSWORD: password
  #        options: >-
  #          --health-cmd "pg_isready -U $POSTGRES_USER"
  #          --health-interval 10s
  #          --health-timeout 5s
  #          --health-retries 5
  #
  #    steps:
  #      - name: Check out code
  #        uses: actions/checkout@v3
  #
  #      - name: Set up Java
  #        uses: actions/setup-java@v3
  #        with:
  #          distribution: 'zulu'
  #          java-version: '17'
  #
  #      - name: Restore Maven cache
  #        uses: actions/cache@v3
  #        with:
  #          path: ~/.m2/repository
  #          key: ${{ needs.setup.outputs.cache-key }}
  #
  #      - name: Restore Maven cache
  #        uses: actions/cache@v3
  #        with:
  #          path: ~/.m2/repository
  #          key: ${{ needs.setup.outputs.cache-key }}
  #
  #      - name: Wait for Postgres
  #        run: |
  #          until pg_isready -h localhost -p 5432; do
  #          echo "Waiting for PostgreSQL..."
  #          sleep 2
  #          done
  #
  #      - name: Run Integration Tests
  #        run: mvn verify -Dspring.profiles.active=test

  vulnerability_scan:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull Docker Image
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_nexus:
    runs-on: ubuntu-latest
    needs: [ vulnerability_scan ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Publish to Nexus (Snapshot)
        if: github.ref != 'refs/heads/devlop'
        run: |
          echo "NEXUS_IP_ADDRESS=${{ secrets.NEXUS_IP_ADDRESS }}"
          echo "NEXUS_PORT=${{ secrets.NEXUS_PORT }}"
          mvn clean deploy -DskipTests --settings .github/settings.xml

        env:
          SONATYPE_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          NEXUS_LIBS_URL: http://172.18.0.4:8081/repository/third-party-libs/
          NEXUS_SNAPSHOT_URL: http://172.18.0.4:8081/repository/maven-snapshots/
          NEXUS_MAVEN_PUBLIC_URL: http://172.18.0.4:8081/repository/maven-public/

  job-summary:
    runs-on: ubuntu-latest
    needs: [ publish_nexus ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate code analysis report
        run: curl -u ${{ secrets.SONAR_TOKEN }} https://sonarcloud.io/api/project_analyses/search?project=${{ secrets.SONAR_PROJECT_KEY }} -o sonar-report.json

      - name: Generate vulnerability report
        run: cat trivy-report.json | jq '.'

      - name: Create summary table
        run: |
          echo "# Analysis and Vulnerability Report" > report.md
          echo "## SonarCloud Analysis" >> report.md
          cat sonar-report.json | jq . >> report.md
          echo "## Vulnerabilities" >> report.md
          cat trivy-report.json | jq -r '.[] | "Package: \(.Target)\nSeverity: \(.Severity)\nDescription: \(.VulnerabilityID)\n"' >> report.md

      - name: Upload summary
        uses: actions/upload-artifact@v3
        with:
          name: summary-report
          path: report.md
