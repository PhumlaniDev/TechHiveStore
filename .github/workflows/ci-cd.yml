name: Build-Test-Analyze Code

permissions:
  issues: read
  contents: read
  actions: read

on:
  pull_request:
    branches: [ develop, main ]
  push:
    branches: [ develop, main ]

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Pre-fetch Maven dependencies
        run: mvn dependency:go-offline

  checkstyle:
    name: Checkstyle
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Run Checkstyle
        run: mvn --batch-mode checkstyle:check

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: checkstyle
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: tech_hive_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Copy Maven settings
        run: |
          mkdir -p ~/.m2
          cp .github/settings.xml ~/.m2/settings.xml

      - name: Build with Maven
        run: mvn --batch-mode clean install -DskipTests -Dspring.profiles.active=develop --settings .github/settings.xml
        env:
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/tech_hive_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          GH_PAT: ${{ secrets.GH_PAT }}
          GH_USERNAME: ${{ secrets.GH_USERNAME }}

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }} ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:latest

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:latest

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Run Unit Tests with H2
        run: mvn --batch-mode test -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;MODE=PostgreSQL
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

  code-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Run SonarCloud Analysis
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          GH_PAT: ${{ secrets.GH_PAT }}
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn --batch-mode verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage, test -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.host.url=https://sonarcloud.io

  vulnerability-scan:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: code-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull Docker Image
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'docker.io/${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

#      - name: Notify Discord on Failure
#        if: failure()
#        uses: rjstone/discord-webhook-notify@v1
#        with:
#          severity: error
#          text: "Security scan failed! Check reports."
#          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
